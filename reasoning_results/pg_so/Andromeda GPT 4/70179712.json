{"res": "Based on the scenario described, where a table is experiencing high insertion rates and autovacuum operations are impacting performance, the following parameters from the provided documentation could be adjusted to optimize the autovacuum behavior and improve overall performance:\n\n1. **`autovacuum_vacuum_insert_threshold`**: Since the table is experiencing a high volume of inserts (more than 10 million per day), reducing the threshold for triggering a VACUUM based on the number of inserted tuples could help in running autovacuum more frequently but on smaller amounts of data, potentially reducing the impact on other processes.\n\n2. **`autovacuum_vacuum_insert_scale_factor`**: Adjusting this parameter could also help in determining when to trigger a VACUUM based on the percentage of the table size. Setting this to a lower value could lead to more frequent vacuuming as the table grows, helping to manage bloat more effectively.\n\n3. **`autovacuum_vacuum_cost_limit`**: This parameter controls the cost limit for automatic VACUUM operations. If the autovacuum operations are too aggressive and impacting other processes, adjusting this limit could help balance the load, allowing other processes more resources while still performing necessary maintenance.\n\n4. **`vacuum_freeze_min_age`**: Since the issue mentioned involves vacuum freezing, adjusting this parameter could help in managing how often pages are frozen, potentially reducing the frequency of aggressive vacuum operations that lock out other users.\n\nThese adjustments aim to make autovacuum operations more frequent but less intensive per run, potentially reducing their impact on database performance and availability for other users.\n\nRecommended parameters to adjust:\n```json\n['autovacuum_vacuum_insert_threshold', 'autovacuum_vacuum_insert_scale_factor', 'autovacuum_vacuum_cost_limit', 'vacuum_freeze_min_age']\n```"}