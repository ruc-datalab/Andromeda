{"res": "To address your query about converting a SELECT/table result into a JSON string format without repeatedly using the `COALESCE(jsonb_agg(tmp)::text, '[]') FROM (...) as tmp` pattern, you can indeed create a common function in PostgreSQL. This function will encapsulate the logic of converting any given SQL query result into a JSON string format. Here\u2019s how you can do it:\n\n### Step 1: Create a Function\nYou can create a SQL function named `my_to_json_string` that takes a query and returns its result as a JSON string. This function will use dynamic SQL inside a PL/pgSQL function.\n\n```sql\nCREATE OR REPLACE FUNCTION my_to_json_string(query text)\nRETURNS text AS $$\nDECLARE\n    result text;\nBEGIN\n    EXECUTE format('SELECT COALESCE(jsonb_agg(row_to_json(t)), ''[]'')::text FROM (%s) AS t', query) INTO result;\n    RETURN result;\nEND;\n$$ LANGUAGE plpgsql;\n```\n\n### Explanation:\n- **Function Name**: `my_to_json_string`\n- **Parameter**: `query` (text) - This is the query string whose result you want to convert into JSON.\n- **Return Type**: `text` - The function returns the JSON string.\n- **Function Body**:\n  - The `EXECUTE` statement runs the dynamic SQL constructed from the input query.\n  - `row_to_json(t)` converts each row of the result set into a JSON object.\n  - `jsonb_agg` aggregates all JSON objects into a JSON array.\n  - `COALESCE` ensures that if the result set is empty, it returns an empty JSON array (`'[]'`).\n  - The result of the query is stored in the `result` variable and returned by the function.\n\n### Step 2: Usage Example\nYou can now use this function to convert the result of any SELECT query into a JSON string format easily:\n\n```sql\nSELECT my_to_json_string('SELECT id, balance FROM student LIMIT 5');\n```\n\n### Expected Output\nThis will output a JSON string similar to:\n```json\n[{ \"id\": 21543, \"balance\": 80 }, { \"id\": 21542, \"balance\": 100 }, { \"id\": 21541, \"balance\": 5980 }, { \"id\": 21540, \"balance\": 10 }, { \"id\": 21539, \"balance\": 15 }]\n```\n\n### Conclusion\nBy using this function, you avoid repeating the complex `COALESCE(jsonb_agg(tmp)::text, '[]') FROM (...) as tmp` pattern in your code. Instead, you encapsulate this logic within a reusable function, simplifying your SQL queries and improving code maintainability.\n\n### Recommended Parameters\n- `query` (text): The SQL query string to be converted into JSON format.\n- `result` (text): Variable to store and return the JSON result.\n\nThis approach should meet your requirements effectively."}