{"res": "Based on the scenario described, where a database operation is followed by a long-running API call, and then another database operation, the issue arises due to the `idle_in_transaction_session_timeout` parameter in PostgreSQL. This parameter is set to terminate any session that has been idle in a transaction for more than the specified duration, which in your case is 10 minutes. Since the API call takes 10 minutes, the database connection is idle for this duration and hence gets closed by PostgreSQL.\n\nTo address this issue, you can consider the following design changes and parameter adjustments:\n\n1. **Increase `idle_in_transaction_session_timeout`**: You could increase the timeout setting to accommodate the duration of the API call. However, this might not be the best practice as it could lead to holding database resources for too long, potentially affecting other operations and overall database performance.\n\n2. **Use a separate transaction for the API call**: Modify the transaction boundaries so that the database transaction does not include the API call. This can be achieved by completing the first database operation and committing the transaction before making the API call. After the API call, you can start a new transaction for the subsequent database operation.\n\n3. **Optimize the API call**: If possible, reduce the duration of the API call. This might involve optimizing the API itself or adjusting how data is processed within the API.\n\n4. **Asynchronous processing**: If the API call does not depend on the immediate results of the first database query, consider making the API call asynchronously and then synchronizing back when processing the final database operation.\n\n5. **Connection Pooling**: Ensure that your application uses a robust connection pooling strategy to efficiently manage database connections, which can help in quickly recovering from any closed connections.\n\n6. **Error Handling and Retry Mechanisms**: Implement error handling in your application to catch the exception when the connection is closed. You can then retry the operation, possibly with a new database connection, to ensure the application remains robust against such failures.\n\nGiven these considerations, the recommended parameters and design changes are:\n\n```json\n[\"Increase idle_in_transaction_session_timeout\", \"Use separate transactions for API calls\", \"Optimize API call duration\", \"Implement asynchronous processing\", \"Enhance connection pooling\", \"Add error handling and retry mechanisms\"]\n```"}