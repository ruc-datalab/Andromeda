{"res": "To manage connections effectively during schema modifications in PostgreSQL, you can use a combination of SQL commands and configuration parameters. Here are the steps and parameters you can use to disconnect all existing connections to a specific database and block new connections, and then allow new connections again:\n\n1. **Disconnect all existing connections to a specific database:**\n   You can use the `pg_terminate_backend()` function to terminate all connections to the database you want to modify. This function requires the process ID of each session connected to that database.\n\n2. **Block all new connections to the specific database:**\n   You can modify the `pg_hba.conf` file to reject all new connections to the database. This involves adding a line that specifically rejects connections to the database you are modifying.\n\n3. **Allow new connections back to the database:**\n   After completing your schema modifications, you can revert the changes made in the `pg_hba.conf` file to allow connections again.\n\nHere are the SQL commands and parameters involved in these steps:\n\n- **Disconnecting all existing connections:**\n  ```sql\n  SELECT pg_terminate_backend(pid)\n  FROM pg_stat_activity\n  WHERE datname = 'target_database_name';\n  ```\n\n- **Blocking and allowing new connections:**\n  You need to edit the `pg_hba.conf` file. To block connections, add:\n  ```\n  host    target_database_name    all    all    reject\n  ```\n  Place this line before any other lines that allow access to ensure it takes precedence. After modifications, remove or comment out this line to allow connections again.\n\n- **Reload the configuration:**\n  After modifying `pg_hba.conf`, you need to reload the PostgreSQL configuration for changes to take effect:\n  ```sql\n  SELECT pg_reload_conf();\n  ```\n\nGiven the operations described, the key parameters and commands you'll be dealing with are:\n```json\n[\"pg_terminate_backend()\", \"pg_hba.conf\", \"pg_reload_conf()\"]\n```"}