{"res": "Based on the provided SQL queries and their EXPLAIN outputs, the difference in index usage between the two queries can be attributed to how MySQL optimizes queries based on the conditions specified and the structure of the indexes.\n\n1. **Query: `explain select * from testtable where a > 1;`**\n   - **EXPLAIN Output:** This query does not use the index (`idx_abd` on columns `a`, `b`, `d`). The type is `ALL`, indicating a full table scan.\n   - **Reason:** The condition `a > 1` is not specific enough to effectively limit the range of rows to be scanned. MySQL optimizer estimates that a significant portion of the table needs to be scanned, so it opts for a full table scan instead of using the index.\n\n2. **Query: `explain select * from testtable where a < 1;`**\n   - **EXPLAIN Output:** This query uses the index (`idx_abd`). The type is `range`, which means that MySQL uses the index to perform a range scan.\n   - **Reason:** The condition `a < 1` effectively limits the range of rows MySQL needs to examine. The optimizer determines that using the index is beneficial as it can quickly isolate the rows that meet this condition, reducing the number of rows it needs to examine.\n\n**How Indexes Work Inside:**\n- **Index Structure:** MySQL typically uses B-tree indexes. Each node in the B-tree represents a value of `a` (from the index `idx_abd`) and points to the table rows where `a` has that value.\n- **Index Use Decision:** When a query is executed, MySQL looks at the available indexes and decides whether using an index is more efficient than scanning the entire table. This decision is based on factors like the selectivity of the index (how effectively the index can narrow down the rows) and the cost associated with using the index versus a full table scan.\n- **Range Scans:** For conditions that specify a range (like `a < 1`), MySQL can quickly locate the start and end points of the range in the index and scan only the relevant portion of the index.\n\n**Recommended Parameters:**\nGiven the context of the queries and the behavior observed, the following parameters from the provided documentation and user questions could be relevant for tuning and influencing the optimizer's decisions:\n\n- **`optimizer_switch`**: This parameter allows enabling or disabling various optimizer features. Adjusting features related to index merging and condition filtering might influence how MySQL chooses to use indexes in similar scenarios.\n- **`innodb_buffer_pool_size`**: While not directly influencing the decision to use an index, ensuring that the InnoDB buffer pool is adequately sized can improve the overall performance of index operations by reducing disk I/O.\n\n**Output List of Parameters:**\n```json\n[\"optimizer_switch\", \"innodb_buffer_pool_size\"]\n```"}