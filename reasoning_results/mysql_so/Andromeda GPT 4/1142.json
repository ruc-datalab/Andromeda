{"res": "Based on the detailed description and issues you're facing with your MySQL 5.6.36 setup on CentOS 7.3 with 48G of RAM, it seems like the server is experiencing memory pressure and inefficiencies possibly due to configuration settings. Here are some recommended parameters to adjust in your configuration to potentially stabilize the system and improve performance:\n\n1. **innodb_buffer_pool_size**: You've set this to 18G, which is generally a good start as it allows InnoDB to keep a significant amount of data and indexes in memory. However, considering the size of your database and available RAM, you might want to increase this to make more efficient use of your server's memory. For a 35G database on a server with 48G of RAM, setting this to around 24G-30G could be beneficial if other memory demands on the system are low.\n\n2. **innodb_log_file_size**: This is set to 1G, which might be too low depending on your workload. Increasing this to about 2G-4G might help reduce the frequency of log flushes to disk, especially if you have a high write workload.\n\n3. **max_connections**: Currently set to 300. Ensure this setting is aligned with your application's concurrency requirements. Too high a value can lead to excessive memory use and contention, while too low a value can throttle your application's performance.\n\n4. **table_definition_cache** and **table_open_cache**: With 6000 tables, and most being partitioned, these caches might be too small. Increasing these can reduce the overhead of opening and closing tables. `table_definition_cache=4000` and `table_open_cache=10000` might be more appropriate.\n\n5. **innodb_buffer_pool_instances**: This is set to 9, which is fine given your buffer pool size. Generally, you want about 1 instance per 1-2GB of buffer pool.\n\n6. **thread_cache_size**: This is not explicitly set in your configuration, which means it's using the default value. Consider setting this to a higher value to reduce the overhead of thread creation and destruction. A value like 50 could be a starting point.\n\n7. **query_cache_size** and **query_cache_type**: These parameters are deprecated in MySQL 5.7 and removed in MySQL 8.0. However, if you are using MySQL 5.6 and have read-heavy workloads with relatively static data, enabling the query cache could potentially improve performance. Set `query_cache_size=256M` and `query_cache_type=1` to enable it.\n\n8. **innodb_file_per_table**: This is enabled, which is generally recommended. It allows each InnoDB table to have its own tablespace file, which can improve I/O performance for certain workloads and make it easier to manage diskspace.\n\n9. **tmp_table_size** and **max_heap_table_size**: These settings control the maximum size of internal in-memory temporary tables. If queries are creating large temporary tables, consider increasing these values. Setting both to `256M` might help, but monitor whether temporary tables are still being created on disk.\n\n10. **innodb_flush_log_at_trx_commit**: This setting controls the balance between ACID compliance and performance. The default value is 1, which provides the best ACID compliance but at the cost of some performance. Setting it to 2 can improve performance if your application can tolerate slightly less durability.\n\nHere's the list of recommended parameters based on your scenario:\n\n```json\n[\n    \"innodb_buffer_pool_size\",\n    \"innodb_log_file_size\",\n    \"max_connections\",\n    \"table_definition_cache\",\n    \"table_open_cache\",\n    \"innodb_buffer_pool_instances\",\n    \"thread_cache_size\",\n    \"query_cache_size\",\n    \"query_cache_type\",\n    \"innodb_file_per_table\",\n    \"tmp_table_size\",\n    \"max_heap_table_size\",\n    \"innodb_flush_log_at_trx_commit\"\n]\n```\n\nAdjust these parameters cautiously, monitor the system's response, and refine as needed based on observed performance and system stability."}