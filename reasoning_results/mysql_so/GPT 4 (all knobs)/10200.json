{"res": "To address high CPU utilization in MySQL, several parameters in your configuration can be adjusted. High CPU usage can often be attributed to inefficient queries, inadequate buffer sizes, or improper handling of connections and threads. Here are some recommended changes to your `my.ini` file:\n\n1. **innodb_thread_concurrency**: This parameter controls the maximum number of threads that can be active inside InnoDB. The current setting might be too low or too high depending on the workload. Consider adjusting it based on the number of CPU cores and the nature of your workload. If you have a high number of cores, you might increase this value, or set it to `0` to allow InnoDB to decide the best concurrency level dynamically.\n\n2. **thread_cache_size**: Increasing this value can reduce the overhead of creating and destroying threads, especially if your server has a high number of new connections. Since creating threads can be CPU-intensive, a larger cache might help reduce CPU usage.\n\n3. **query_cache_size** and **query_cache_type**: The query cache can be a double-edged sword. While it can reduce CPU usage by serving results from cache, maintaining the cache can increase CPU usage if your workload involves many write operations. Consider disabling the query cache by setting `query_cache_size = 0` and `query_cache_type = 0` if your workload is write-heavy.\n\n4. **max_connections**: High values for `max_connections` can lead to excessive CPU usage as more threads are active and contending for resources. Ensure that this setting aligns with your hardware capabilities and actual application needs.\n\n5. **table_open_cache**: This parameter determines the number of open tables for all threads. If this value is set too low, MySQL will frequently open and close tables, which can increase CPU usage. However, setting it too high can lead to excessive memory use. Monitor your open tables and adjust accordingly.\n\n6. **innodb_buffer_pool_size**: This is one of the most critical InnoDB parameters. Ensure that it is set to about 70-80% of your total RAM if MySQL is the primary application on the server. A well-sized buffer pool can reduce disk I/O by caching data and indexes in memory, thus reducing CPU usage related to I/O operations.\n\n7. **innodb_log_file_size** and **innodb_log_buffer_size**: Ensure these are adequately sized to handle your workload. A larger log file size will handle larger transactions more efficiently, reducing the need for disk I/O and CPU usage.\n\n8. **long_query_time**: Consider lowering this value to capture more slow queries that could be consuming high CPU. Analyzing and optimizing these queries can significantly reduce CPU usage.\n\n9. **tmp_table_size** and **max_heap_table_size**: Ensure these values are large enough to accommodate most temporary tables in memory. If temporary tables are written to disk, it can increase CPU usage due to disk I/O operations.\n\n10. **innodb_flush_log_at_trx_commit**: This setting controls the balance between ACID compliance and performance. Setting it to `2` can reduce the I/O load, which indirectly reduces CPU usage, but at the risk of losing up to one second of transactions in case of a crash.\n\nHere's the list of parameters to consider adjusting based on the above recommendations:\n\n```json\n[\n    \"innodb_thread_concurrency\",\n    \"thread_cache_size\",\n    \"query_cache_size\",\n    \"query_cache_type\",\n    \"max_connections\",\n    \"table_open_cache\",\n    \"innodb_buffer_pool_size\",\n    \"innodb_log_file_size\",\n    \"innodb_log_buffer_size\",\n    \"long_query_time\",\n    \"tmp_table_size\",\n    \"max_heap_table_size\",\n    \"innodb_flush_log_at_trx_commit\"\n]\n```"}