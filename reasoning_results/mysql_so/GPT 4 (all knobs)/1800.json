{"res": "To address the issue described, where connections to a read-only MySQL instance need to be treated as invalid or closed in the connection pool, you can indeed use a validation query approach. However, the MySQL server or database parameters themselves do not directly support altering the behavior of a connection pool based on the results of a validation query. This functionality would need to be implemented at the application or middleware level, such as within the connection pool configuration or by extending the connection pool's behavior.\n\nGiven the scenario and the need to integrate this logic with minimal changes to the application, you can consider the following approach:\n\n1. **Use a Validation Query**: Configure the connection pool to use a validation query that checks the `read_only` status of the MySQL instance. The query could be something like `SELECT @@global.read_only;`.\n\n2. **Custom Connection Validation**: Implement custom logic in the connection pool to interpret the result of the validation query. If the result indicates that the instance is read-only (`@@global.read_only = 1`), the connection should be considered invalid. This might require custom development or extending the connection pool's validation mechanism.\n\n3. **Configure Connection Pool Settings**: Adjust settings in the connection pool to ensure it frequently validates connections and removes invalid connections. This includes setting appropriate values for parameters like `testOnBorrow`, `testOnReturn`, and `testWhileIdle` in the connection pool configuration.\n\n4. **DNS Caching**: Since DNS caching at the OS level is also a concern, consider configuring the OS or using tools to reduce DNS cache time, or programmatically flush DNS cache in critical scenarios.\n\n5. **Application Logic**: As a fallback, enhance application logic to handle exceptions related to read-only access gracefully, possibly retrying the operation or redirecting the request to a known write-capable instance.\n\nFrom the database perspective, the parameters directly related to MySQL configuration that might be relevant (though not directly solving the connection pool issue) include:\n- `read_only`\n- `super_read_only`\n\nHowever, these parameters are more about configuring the MySQL instance rather than handling connection pool behavior. The solution primarily lies in the connection pool and application architecture rather than database parameters.\n\nTherefore, the output list focusing on MySQL parameters that are directly relevant to your scenario would be:\n```json\n['read_only', 'super_read_only']\n```\nThese parameters are useful for configuring the MySQL instances but remember that the main solution will involve configuring the connection pool and potentially customizing its behavior."}