{"res": "To effectively capture and monitor MySQL change events using the ZongJi module, you need to ensure that your MySQL server is properly configured to generate binary logs in a format that ZongJi can interpret and use. The key parameters related to this setup typically involve the binary logging configuration of the MySQL server. Here are the relevant parameters you should verify or set:\n\n1. **`log_bin`** - This parameter enables binary logging, which is essential for ZongJi to capture change events.\n2. **`binlog_format`** - ZongJi works best with the `ROW` format, as it logs changes at the row level, which is necessary for capturing the exact changes in the data.\n3. **`server_id`** - This is a unique identifier for the MySQL server instance in a replication topology. It's important for binary logging and replication.\n4. **`log_slave_updates`** - If this server is a replication slave, this parameter should be set so that changes received from a master are logged to the binary log of the slave.\n5. **`binlog_do_db`** - This parameter can be used to specify which databases to log binary log events for, which can be useful if you're only interested in changes to specific databases.\n6. **`binlog_ignore_db`** - This parameter specifies which databases should be ignored in binary logging.\n\nGiven your scenario, where you are trying to listen to MySQL change events, ensure these parameters are correctly set in your MySQL configuration. Here's the list of recommended parameters based on your needs:\n\n```json\n[\"log_bin\", \"binlog_format\", \"server_id\", \"log_slave_updates\", \"binlog_do_db\", \"binlog_ignore_db\"]\n```\n\nMake sure to restart your MySQL server after making changes to these parameters for them to take effect. Additionally, verify that your MySQL user (used in the ZongJi configuration) has the necessary privileges to read the binary logs."}