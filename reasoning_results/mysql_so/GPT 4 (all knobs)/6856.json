{"res": "To address the issue of the row size exceeding the maximum allowed size during the restoration of a database dump from MySQL 5.6 to MySQL 8, you can consider adjusting the following parameters:\n\n1. **`innodb_page_size`**: Increasing the InnoDB page size can allow for larger row sizes. The default page size in MySQL 8 is 16KB, but it can be increased to 32KB or 64KB if supported by your file system and operating system. This change must be done before creating any tables in the database, as it affects the physical size of the database files.\n\n2. **`innodb_strict_mode`**: Disabling `innodb_strict_mode` can allow some flexibility with row size limits. However, this is generally not recommended as it can lead to silent truncation of data.\n\n3. **`max_allowed_packet`**: Ensuring that `max_allowed_packet` is sufficiently large to handle the largest possible packet size in your database operations. This parameter primarily affects the maximum size of a packet or a generated/intermediate string.\n\n4. **`innodb_file_format`**: (Applicable to MySQL 5.7 and earlier) Ensure that the file format supports large index key prefixes if using large columns. MySQL 8 uses a dynamic format which supports large index key prefixes by default.\n\n5. **`innodb_file_per_table`**: Enabling this option ensures that each InnoDB table is stored in a separate .ibd file, which can help manage large datasets more efficiently.\n\nHere is the list of parameters you might consider adjusting based on the provided context:\n\n```json\n['innodb_page_size', 'innodb_strict_mode', 'max_allowed_packet', 'innodb_file_per_table']\n```\n\nBefore making these changes, it's crucial to test them in a development environment to ensure they do not negatively impact your application's functionality or performance. Additionally, consider consulting the MySQL 8 documentation or a database professional to ensure compatibility and stability."}