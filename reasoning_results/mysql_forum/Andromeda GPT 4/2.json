{"res": "Based on the details provided in your query and the parameters mentioned in the reference questions and manuals, here are the recommended parameters to focus on for optimizing your MySQL server performance, especially considering the high CPU usage during complex queries involving joins:\n\n1. **`key_buffer_size`** - This parameter is crucial for MyISAM tables as it specifies the amount of memory allocated for caching MyISAM indexes. You've set it to 2G, which might be high depending on the size of your MyISAM indexes. Consider adjusting this if you're using InnoDB primarily.\n\n2. **`query_cache_size`** - You've allocated a very large amount to the query cache (2G), which can be counterproductive as it might increase the overhead of maintaining the cache, especially on a busy server with lots of writes. Consider reducing this size to a more moderate value.\n\n3. **`query_cache_limit`** - This is set to 1G, which is unusually high. This setting determines the maximum result set size that can be cached. Large values can lead to inefficient cache usage. Reducing this value can help in better utilization of the query cache.\n\n4. **`thread_cache_size`** - This parameter determines how many threads the server should cache for reuse. Since you have a high number of processors, you might benefit from increasing this value to reduce the overhead of thread creation and destruction.\n\n5. **`max_connections`** - This is set to 100, which might be low depending on your workload. If you are experiencing high CPU usage due to a large number of concurrent connections, you might need to increase this value. However, be cautious as too many connections can also lead to increased contention.\n\n6. **`table_cache`** (or `table_open_cache` in newer versions) - This parameter determines the number of open tables for all threads. MySQL opens several tables for each client request. Increasing this value can improve performance if you have many tables and sufficient RAM.\n\n7. **`tmp_table_size`** - This parameter specifies the maximum size of internal in-memory temporary tables. Queries that use more space will be passed on disk-based tables, which are slower. Adjusting this parameter might help in performance if your queries generate large temporary tables.\n\n8. **`max_allowed_packet`** - This is set to 500M in your configuration, which is quite high. This parameter might need adjustment based on the actual needs of your application, particularly if you are dealing with large BLOBs or long strings.\n\nGiven these parameters, the recommended list to focus on would be:\n\n```plaintext\n['key_buffer_size', 'query_cache_size', 'query_cache_limit', 'thread_cache_size', 'max_connections', 'table_cache', 'tmp_table_size', 'max_allowed_packet']\n```"}