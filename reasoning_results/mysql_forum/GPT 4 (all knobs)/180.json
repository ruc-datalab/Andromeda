{"res": "To address the issue of ignoring the underscore character ('_') in `MATCH() AGAINST()` clauses in MySQL, you might need to consider the following parameters and configurations:\n\n1. **ft_min_word_len**: This parameter sets the minimum length of the words to be included in a FULLTEXT index. If the underscore is considered as a word separator, adjusting this value might help in treating shorter strings as searchable words.\n\n2. **ft_boolean_syntax**: This parameter allows you to define the operators that can be used in a Boolean full-text search. Adjusting this might not directly solve the underscore issue but can be useful for tweaking how Boolean searches are handled.\n\n3. **innodb_ft_min_token_size**: For InnoDB tables, this parameter sets the minimum length of the token in FULLTEXT indexes for InnoDB tables, similar to `ft_min_word_len` for MyISAM.\n\n4. **innodb_ft_enable_stopword**: Setting this parameter to `OFF` can prevent InnoDB from ignoring certain words (based on the stopword list) in FULLTEXT searches. This might not directly affect the handling of underscores but is relevant for full-text search configurations.\n\n5. **ft_stopword_file**: This parameter specifies the file from which to read the list of stopwords for FULLTEXT indexes. By customizing this file, you can control which words are considered stopwords. Although it doesn't directly address the underscore issue, it's a critical setting for full-text search behavior.\n\n6. **character_set_connection** and **collation_connection**: These settings determine the character set and collation for the current connection. Adjusting the collation might influence how characters like underscores are treated, although typically underscores are not affected by collation rules directly.\n\nGiven the specific requirement to treat underscores differently (i.e., as separators), MySQL's FULLTEXT search might not directly support this behavior without some form of preprocessing or customization of the data (e.g., replacing underscores with spaces before indexing).\n\nIf none of the above parameters help in achieving the desired behavior with FULLTEXT search, you might need to consider alternative approaches such as:\n\n- **Preprocessing the data**: Replace underscores with spaces or another placeholder character in the data before it is indexed.\n- **Using LIKE or REGEXP**: For more complex matching rules that FULLTEXT search does not support directly, SQL patterns or regular expressions might be necessary, albeit with potential performance impacts.\n\nHere's the list of parameters based on the discussion:\n\n```json\n[\"ft_min_word_len\", \"ft_boolean_syntax\", \"innodb_ft_min_token_size\", \"innodb_ft_enable_stopword\", \"ft_stopword_file\", \"character_set_connection\", \"collation_connection\"]\n```"}