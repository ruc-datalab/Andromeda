{"res": "Based on the information provided and the issues you are facing with row size during the restoration of a database dump from MySQL 5.6 to MySQL 8, the relevant parameters to consider adjusting are related to InnoDB's configuration that can influence row size limits and overall database performance. The parameters mentioned in your query and the documentation provided include:\n\n1. **innodb_log_buffer_size** - This parameter specifies the size of the buffer that InnoDB uses to write to the log files on disk. While this parameter primarily affects log buffer size, ensuring it is adequately sized can help with overall database performance, especially during large data operations like restoring a database.\n\n2. **innodb_log_file_size** - This parameter determines the size of each log file in a log group of InnoDB. Larger log files can handle larger transactions, which might be indirectly related to handling larger row sizes during operations like database restoration.\n\n3. **max_allowed_packet** - This parameter sets the maximum packet size for network communication between the client and the server. Increasing this value can be beneficial if large data packets are part of the database operations, which might be the case during a database restore.\n\nGiven the specific issue of row size exceeding the maximum allowed size in MySQL 8, while not directly adjustable through a simple configuration parameter, understanding and adjusting parameters that influence InnoDB's behavior and its handling of large data can be beneficial.\n\nTherefore, the recommended parameters to consider adjusting are:\n```json\n['innodb_log_buffer_size', 'innodb_log_file_size', 'max_allowed_packet']\n```"}