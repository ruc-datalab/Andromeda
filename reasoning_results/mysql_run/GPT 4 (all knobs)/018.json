{"res": "To reduce the number of disk I/O operations and improve performance in your MySQL setup, consider adjusting the following parameters:\n\n1. **innodb_buffer_pool_size**: Increasing this parameter allows more data to be held in memory, reducing the need to access disk frequently. Ensure it's set to a value that utilizes a significant portion of your server's available memory, typically up to 70-80% of total RAM, depending on what other processes are running on the server.\n\n2. **innodb_log_file_size**: Increasing the size of the log file can help in handling more transactions before needing to write to the disk.\n\n3. **innodb_flush_log_at_trx_commit**: Setting this to 2 can improve performance by writing the log to the disk only once per second rather than at every commit, though it can risk up to one second of transactions in case of a crash.\n\n4. **innodb_io_capacity**: Adjust this parameter to match the I/O capacity of your disk subsystem. It controls the number of I/O operations per second that InnoDB can use.\n\n5. **innodb_read_io_threads** and **innodb_write_io_threads**: Increasing these values allows InnoDB to use more threads for read and write I/O operations, which can improve throughput on systems with fast storage and multiple cores.\n\n6. **innodb_buffer_pool_instances**: If you have a large buffer pool, increasing the number of buffer pool instances can reduce contention and improve the scalability of the system.\n\nHere's the list of recommended parameters based on your scenario:\n\n```json\n[\n    \"innodb_buffer_pool_size\",\n    \"innodb_log_file_size\",\n    \"innodb_flush_log_at_trx_commit\",\n    \"innodb_io_capacity\",\n    \"innodb_read_io_threads\",\n    \"innodb_write_io_threads\",\n    \"innodb_buffer_pool_instances\"\n]\n```"}